*************************************************************
* Chapter 02-3. `tsconfig.json` 파일 살펴보기                 *
*************************************************************

목표3. TypeScript Compiler (`ntsc`) 설정파일인, `tsconfig.json` 파일 관리방법


01. 참고자료																		<--- ***

	(1) > tsc --help
	(2) https://www.typescriptlang.org/tsconfig


02. `tsconfig.json` 파일은 크게 2개로 아래와 같이 구성되어 있는 JSON 파일입니다.	<--- ***

	{
		// 1. `tsc` 명령에서, options에 해당
		"compilerOptions" { ... },

		// 2. Transpile 대상 지정
		//    "src/**/*" : `src` directory는 물론, 
		//					그 하위 디렉토리의 모든 파일을 compile 대상으로 포함함을 의미
		"include": [ "src/**/*" ]
	}


03. `tsconfig.json` 파일은 "key: value" 형태로 작성

	a. "key" 	: *Compile 옵션* 항목 의미
	b. "value" 	: `key`에 해당하는 *키값* 의미
	c. `key`와 `value`는 콜론(:)으로 구분하며, 콜론(:)을 기준으로 'key: value' 형태로 작성


04. 일반적인 TypeScript 기반 Project 의 `tsconfig.json` 구성항목은 아래와 같음:		<--- ***

		* Default `tsconfig.json` Options:

		{
			"compilerOptions": {
				"module": "commonjs",						①
				"esModuleInterop": true,					②
				"target": "es5",							③
				"moduleResolution": "node",					④
				"outDir": "dist",							⑤
				"baseUrl": ".",								⑥
				"sourceMap": true,							⑦
				"downlevelIteration": true,					⑧
				"noImplicitAny": false,						⑨
				"paths": { "*" : [ "node_modules/*" ] }		⑩
			},

			"include" : [ "src/**/*" ]						⑪
		}


05. "module" key

	- TypeScript 소스코드가 compile 되어 만들어진 `ES5` JavaScript 소스코드는,

		(1) Web Browser
		(2) Node.js

	  에서 모두 동작해야 합니다.

	- 그런데 Web Browser와 Node.js 에서는 물리적으로 동작하는 방식이 다름. 		<--- ***
	  그래서 여러 개의 파일(즉, 모듈, Modules)로 분할된 JavaScript 코드 또한 Web Browser와 Node.js에서
	  양쪽에서 각각 다르게 동작.

	- JavaScript Module은,

		(1) Web Browser : AMD (Asynchronous Module Definition) 방식으로 동작.	<--- ***
		(2) Node.js (Non-Browser 환경) : `CommonJS` 방식으로 동작.				<--- ***

	- Runtime Platform이 Web Browser인지, Node.js 인지 구분해, 
	  그에 맞는 모듈방식으로 컴파일하려는 목적으로 설정하는 용도로 사용됨.		<--- ***

	- Platform에 따라, 아래와 같이 설정가능해짐:

		(1) 웹브라우저에서 동작 => AMD
		(2) Node.js 에서 동작   => CommonJS


06. "moduleResolution" Key

	- if `module` key value is `CommonJS`, Node.js is Runtime Platform.
	  So this case, key value is always "node" configured. 						<--- ***

	- Whereas, if `module` key value is `amd`,
	  this key value is always `classic` configured.							<--- ***


07. `target` Key

	- Transpile할 대상인 JavaScript의 버전 설정.								<--- ***
	- 대부분, `es5`를 키값으로 설정
	- 만일 최신버전의 Node.js를 사용한다면, `es6`로 설정도 가능


08. `baseUrl`과 `outDir` Key

	- Transpiled `ES5` JavaScript 파일 저장 Directory 설정.						<--- ***
	- `tsc` : `tsconfig.json` 파일이 있는 directory에서 실행됨.
	  따라서, Current Directory를 의미하는 '.'로, `baseUrl` 의 키값으로 설정하는 것이 일반적임.
	- `outDir` Key는, `baseDir` 설정값을 기준으로 했을 때, Sub-directory의 이름입니다.
	  앞서, 이 key는, `dist`라는 값을 설정했으므로, 빌드된 결과가 `dist` directory에 만들어집니다.


09. `paths` key

	- Source 파일의 `import` 문에서, `from` 부분을 해석할 때 찾아야 하는 directories 설정.	<--- ***

	- `import` 문이 찾아야 하는 소스가 *외부* 패키지라면, `node_modules` directory에서 찾아야 하므로,
	  키값에 `node_modules/*` 도 포함.


10. `esModuleInterop` Key

	- Open Source 기반의 JavaScript Libraries 중에는, Web Browser 에서 동작하는 가정하에 만들어진 것이 많은데,
	  이들은 `CommonJS` 방식으로 동작하는, TypeScript 코드에 혼란을 줄 수 있음.

	  예) `chance` 패키지 : 바로 `AMD` 방식을 전제로 해서 구현된 라이브러리.

	- 따라서, 위 `chance` 패키지 같은 라이브러리가 제대로 동작하려면, 이 key의 값을 반드시 `true`로 설정해야 함.	<--- ***


11. `sourceMap` Key

	- If `true`, Transpiled directory 에는 `*.js` 파일 이외에도, `*.js.map` 파일(Source Map 파일)이 만들어짐.
	- 이 Source Map 파일은, 변환된 JavaScript 코드가, TypeScript 코드의 어디에 해당하는지를 알려줍니다.		<--- ***
	- Source Map 파일은, 주로 디버깅할 때 사용됨.


12. `downlevelIteration` Key

	- TypeScript의 `Generator` 구문이 정상동작하려면, 이 키 값을 반드시 `true`로 설정해야 함.


13. `noImplicitAny` Key

	- TypeScript Compiler는, 기본적으로 f(a, b) 처럼, 매개변수 a,b에 타입을 명시하지 않은 코드일 경우,
	  f(a: any, b: any)처럼, 암시적으로 `any` 타입으로 설정한 것으로 간주함.

	- 이런 형태의 코드는, TypeScript 언어의 장점을 사용하는 것이 아니므로, 코드에 문제가 생김

		예: `a` 매개변수에는 암시적으로 `any` 형식이 포함됩니다. ts(7006) => 타입 미지정시 오류 메시지

	- 이런 오류는 TypeScript 초심자를 매우 혼란스럽게 함.
      이유는, 오류 메시지가 직관적이지 않기 때문.

	- 이런 혼란을 줄이고자 한다면, 이 키의 값을 `false`로 설정합니다. 										<--- ***
	  이렇게 설정하면, 타입을 지정하지 않더라도, 문제로 인식하지 않습니다.





