*************************************************************
* Chapter 02-2. 모듈(Module) 이해하기                       *
*************************************************************

목표2. TypeScript import/export keyword 이용한, 여러 소스파일 관리방법


01. 모듈(Module)이란 ?

	a. TypeScript 에서, `index.ts`와 같은 소스파일을 모듈(Module) 이라고 함.									<--- ***

	b. 각각의 `*.ts` 파일이, 각각의 모듈(Module)이 됨.															<--- ***

	c. 원래 소스파일 하나로 구현해도 되지만, 
		- 코드관리와 유지보수의 편리함
		- 모듈마다 고유의 기능 구현하는 방식으로, 소스코드 분할 (이런 작업을 "모듈화(Modulization)"라고 함)

	d. 소스코드를 여러 개 모듈로 분할하면, 어떤 모듈에 어떤 내용이 있는지 서로 알게 해줘야 됨.   				<--- ***
		- 이를 위해, TypeScript는 `import`와 `export` 키워드 제공.
		
		(1) `export` : 특정 기능을 제공하는 모듈에서 사용
		(2) `import` : 특정 모듈의 기능을 이용하는 모듈에서 사용


02. `index.ts` 파일의 모듈화

	a. `src/person` directory 생성
	b. `src/person/Person.ts` 파일 생성
	c. 생성된 `src/person/Person.ts` 파일에 `index.ts` 파일의 일부 내용 이동시킴



03. `export` 키워드

	a. `export` 키워드는 아래 키워드 앞에 붙일 수 있음.											<--- ***

		(1) function
		(2) interface
		(3) class
		(4) type
		(5) let
		(6) const



04. `import` 키워드

	a. 어떤 모듈(*.ts 파일)이 `export` 키워드로 내보낸 Symbol을 받아서 사용하려면,
	   `import` 키워드로 `export` 된 Symbol을 불러와야 합니다.

	b. `import` 키워드를 사용하는 형식은 몇가지 있지만, 가장 기본적인 형태는 아래와 같다.		<--- ***

		import { Symbol1, Symbol2, ... } from 'export한 파일의 상대경로'

	c. `index.ts` 파일의 첫 줄에 `import` 구문 추가.

		import { IPerson, makePerson } from './person/Person'

		...



05. `import * as` 구문 																			<--- ***

	a. `import` 구문의 또 다른 형태로, 사용형식은 아래와 같음.

		import * as SYMBOL from 'export한 파일의 상대경로' 										<--- ***



06. `export default` 키워드 																	<--- ***

	a. TypeScript는, JavaScript와의 호환성 위해, `export default` 구문 제공.
	b. 한 모듈(*.ts 파일) 당, export 할 기능 중, 오직 한 개에만 붙일 수 있음.
	c. `export default` 가 붙은 기능은, `import` 문으로 불러올 때, 중괄호({}) 없이 사용가능.
	d. `export default` 는 `export` 등이 있는 파일에서도 사용가능.


07. 외부 패키지 사용할 때 `import` 문

	a. 예제를 위해, `chance`와 `ramda` 패키지 추가 설치.										<--- ***

		// -S or --save option: `package.json` 파일에, `dependencies` 항목에 반영(패키지 추가) => *실행* 시 사용
		> npm i -S chance ramda

		// -D or --save-dev option: `package.son` 파일에, `devDependencies` 항목에 반영(패키지 추가) => *개발* 시 사용
		> npm i -D @types/chance @types/ramda

		> more package.json

		// 로컬 영역에 설치된 패키지 목록을 depth = 0 으로 목록화
		> npm ls --depth=0

	b. `chance` 패키지	: 그럴듯한 가짜 데이터(face data) 생성하는데 사용.						<--- ***
		- `Chance` 클래스 하나만, `export default` 형태로 제공
		- 외부 패키지이므로, `node_modules` 디렉토리 아래에 있음 
		  => import ~ from 'chance'로 경로 등에서 `./` 생략한 채로, 'chance' 처럼 사용

	c. `ramda` 패키지 	: 함수형 유틸리티 패키지.												<--- ***
		- 다양한 기능을 제공하므로, `import * as Symbol` 형태로 사용
		- 외부 패키지이므로, `node_modules` 디렉토리 아래에 있음
		  => import ~ from 'chance'로 경로 등에서 `./` 생략한 채로, 'ramda' 처럼 사용

	d. `chance` 패키지 사용하려면, TypeScript 소스파일 상단에 아래 `import` 구문 추가

		import Chance from `chance` 															<--- ***

	e. `ramda` 패키지 사용하려면, TypeScript 소스파일 상단에 아래 `import` 구문 추가

		import * as R from `ramda` 																<--- ***


	f. npm run dev 		실행하여 정상동작 확인
	   npm run build 	실행하여 정상동작 확인

